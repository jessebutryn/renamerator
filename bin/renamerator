#!/usr/bin/env bash
#
[[ $DEBUG == true ]] && set -x
#######################################
libdir="$(dirname "$(realpath "$0")")/../lib"
if [[ -f "${libdir}/functions.sh" ]]; then
	. "${libdir}/functions.sh"
else
	printf '%s\n' 'ERROR! Could not find lib/functions.sh' >&2
	exit 1
fi
if [[ ! -f "${libdir}/capitalize.awk" ]]; then
	printf '%s\n' 'ERROR! Could not find lib/capitalize.awk' >&2
	exit 1
fi
if [[ ! -f "${libdir}/remove_aggressive.pl" ]]; then
	printf '%s\n' 'ERROR! Could not find lib/remove_aggressive.pl' >&2
	exit 1
fi
if [[ ! -f "${libdir}/remove_junk.pl" ]]; then
	printf '%s\n' 'ERROR! Could not find lib/remove_junk.pl' >&2
	exit 1
fi
#######################################
removal=false
aggressive=false
recursive=false
periods=false
underscores=false
dashes=false
years=false
dryrun=false
capitalize=false
delimiter=' '
quiet=false
#######################################
usage () {
	cat <<EOF >&2
This script will rename a given file or directory full of files to remove
common unwanted phrases, labels, delimiters, etc.

Usage:	$(basename "$0") -purdf 'Movie.x264.[DVDRIP].XVID.mp4'
	$(basename "$0") [-hpurRaqDctyA] [-f FILENAME | -d DIRECTORY] [-k DELIMETER] [-o OUTPUT_DIRECTORY]

-h	Print usage.
-a	Aggressive removal will be performed.
-A	All substitutions and replacements will take place.
-f	Provide the filename to be renamed.
-d	Provide a directory name.  All files inside this directory will be renamed.
-c	Words will be capitalized.
-r	Pattern removal will take place.
-k	Specify a delimiter (default will be space).
-R	Directory renaming will happen recursively.
-p	Periods will be converted into set delimiter (default space).
-u	Underscores will be converted into set delimiter (default space).
-y	Years (date) will be removed.
-t	Dry run.  No actual changes will take place.
-D 	Dashes will be converted into set delimiter (default space).
-o 	Specify a new output directory.
-q	Quiet mode.
EOF
	exit 2
}



get_files () {
	local _file=$1
	local _dir
	local _tmp



	if [[ -f "$_file" ]]; then
		printf '%s\n' "$_file"
	elif [[ -d "$_file" && $recursive == false ]]; then
		_dir=$_file
		for f in "${_dir}/"*; do
			if [[ -f "$f" ]]; then
				printf '%s\n' "$f"
			fi
		done
	elif [[ -d "$_file" && $recursive == true ]]; then
		_dir=$_file
		find "$_dir" -type f -follow -print
	else
		err "File ($_file) unknown"
		return 1
	fi
}



renamerate () {
	local _file=$1
	local _basename=$(basename "$_file")
	local _dirname=$(dirname "$_file")
	local _newname=$_basename
	local _newfullname
	if [[ ! -w $_file ]]; then
		err "File ($_file) is not writable."
		return 1
	fi



	if [[ $removal == true ]]; then
		if [[ $aggressive == true ]]; then
			_newname=$(echo "$_newname" | "${libdir}/remove_junk.pl" | "${libdir}/remove_aggressive.pl")
		elif [[ $aggressive == false ]]; then
			_newname=$(echo "$_newname" | "${libdir}/remove_junk.pl")
		fi
	fi
	if [[ $years == true ]]; then
		_newname=$(yank_years "$_newname")
	fi
	if [[ $underscores == true ]]; then
		_newname=$(transmute_underscores "$_newname")
	fi
	if [[ $dashes == true ]]; then
		_newname=$(transmute_dashes "$_newname")
	fi
	if [[ $periods == true ]]; then
		_newname=$(transmute_periods "$_newname")
	fi
	if [[ $capitalize == true ]]; then
		_newname=$(echo "$_newname" | "${libdir}/capitalize.awk")
	fi

	_newname=$(delimit "$_newname")



	if [[ -d "$output_dir" ]]; then
		_newfullname="${output_dir}/${_newname}"
	elif [[ -n "$_newname" ]]; then
		_newfullname="${_dirname}/${_newname}"
	fi


	if [[ "$_file" == "$_newfullname" ]]; then
		[[ $quiet == false ]] &&
		printf '%s: No change\n' "$_file" >&2
	elif [[ -f "$_newfullname" ]]; then
		[[ $quiet == false ]] &&
		err "$_newfullname already exists"
	elif [[ $dryrun == true ]]; then
		printf 'mv "%s" "%s"\n' "$_file" "$_newfullname" >&2
	else
		mv "$_file" "$_newfullname"
	fi
}
#######################################
while getopts hf:d:raRcpudDto:qyk:A opt; do
	case $opt in
		A)	removal=true; periods=true; dashes=true; underscores=true; years=true; capitalize=true;;
		a)	aggressive=true;;
		f)	file=$(realpath "$OPTARG");;
		d)	directory=$(realpath "$OPTARG");;
		r)	removal=true;;
		R)	recursive=true;;
		p)	periods=true;;
		D)	dashes=true;;
		c)	capitalize=true;;
		u)	underscores=true;;
		t)	dryrun=true;;
		k)	delimiter=$OPTARG;;
		q)	quiet=true;;
		o)	output_dir=$(realpath "$OPTARG");;
		y)	years=true;;
		h)	usage;;
		*)	err "Unknown option: $opt"; usage;;
	esac
done
#######################################
if [[ -n $file && -n $directory ]]; then
	err '-f and -d are mutually exclusive options.  Please use only one.'
	exit 1
fi

readarray -t files < <(get_files "${file:=$directory}")

for f in "${files[@]}"; do
	renamerate "$f"
done
